{"version":3,"sources":["utils/generateCards.js","redux/GameAction.js","redux/reducer/index.js","redux/store.js","components/card/Card.jsx","components/board/Board.jsx","App.js","index.js"],"names":["generateCards","id","array","arr","slice","i","length","mixCard","Math","floor","random","casual","mix","reduce","acc","idx","push","index","overturn","rival","Type","initialState","cards","step","nick1","nick2","round","isModal","isWin","gameReducer","state","action","type","newState","cardClicked","find","card","Object","assign","map","rel","keys","filter","store","createStore","devToolsEnhancer","Card","handleClick","height","width","className","style","onClick","src","alt","Board","key","connect","dispatch","showCards","gameActions","resetGame","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.d47fa495.chunk.js","sourcesContent":["function mix(array) {\n  const arr = array.slice(0);\n  for (let i = 0; i < array.length; i++) {\n    const mixCard = Math.floor(Math.random() * (i + 1));\n    const casual = arr[i];\n    arr[i] = arr[mixCard];\n    arr[mixCard] = casual;\n  }\n  return arr;\n}\n\nexport default function generateCards() {\n  let id = 0;\n  const cards = ['1', '2', '3', '4', '5', '6'].reduce((acc, idx) => {\n    acc.push({\n      id: id++,\n      idx,\n      index: id + 5.1,\n      overturn: false,\n      rival: false,\n    });\n    acc.push({\n      id: id++,\n      idx,\n      index: id + 5.1,\n      overturn: false,\n      rival: false,\n    });\n    return acc;\n  }, []);\n  return mix(cards);\n}\n","import generateCards from '../utils/generateCards';\n\nexport const Type = {\n  START_GAME: 'SART_GAME',\n  OVERTURN_CARD: 'OVERTURN_CARD',\n  CHECK_CARDS: 'CHECK_CARDS',\n  RESET_GAME: 'RESET_GAME',\n};\n\nexport const startGame = () => {\n  const cards = generateCards();\n  return {\n    type: Type.START_GAME,\n    cards,\n  };\n};\nexport const overturnCard = (idx, id) => {\n  return {\n    type: Type.OVERTURN_CARD,\n    idx,\n    id,\n  };\n};\n\nexport const resetGame = () => {\n  return {\n    type: Type.RESET_GAME,\n  };\n};\n","import { Type } from '../GameAction';\nimport generateCards from '../../utils/generateCards';\n\nconst initialState = {\n  cards: [],\n  step: 20,\n  nick1: null,\n  nick2: null,\n  round: 1,\n  isModal: false,\n  isWin: false,\n};\n\nconst gameReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case Type.START_GAME:\n      return {\n        ...state,\n        cards: [...action.cards],\n      };\n    case Type.OVERTURN_CARD:\n      if (state.step === 0) {\n        return {\n          ...state,\n          isModal: true,\n        };\n      }\n      let newState = { round: state.round + 1, step: state.step - 1 };\n\n      if (state.round % 2 === 1) {\n        let cardClicked = state.cards.find(card => {\n          return card.id === action.id;\n        });\n        Object.assign(newState, {\n          nick1: cardClicked.idx,\n          nick2: null,\n          cards: state.cards.map(card => {\n            return card.id === action.id || card.rival === true\n              ? Object.assign({}, card, { overturn: true })\n              : Object.assign({}, card, { overturn: false });\n          }),\n        });\n      } else {\n        let cardClicked = state.cards.find(card => {\n          return card.id === action.id;\n        });\n        if (cardClicked.idx === state.nick1) {\n          Object.assign(newState, {\n            nick1: state.nick1,\n            nick2: cardClicked.idx,\n            cards: state.cards.map(card => {\n              return card.id === action.id || card.idx === state.nick1\n                ? Object.assign({}, card, { overturn: true, rival: true })\n                : card;\n            }),\n          });\n        } else {\n          Object.assign(newState, {\n            nick1: state.nick1,\n            nick2: cardClicked.rel,\n            cards: state.cards.map(card => {\n              return card.id === action.id\n                ? Object.assign({}, card, { overturn: true })\n                : card;\n            }),\n          });\n        }\n      }\n      if (\n        Object.keys({\n          ...state.cards.filter(card => card.overturn === true),\n        }).length === 11\n      ) {\n        return {\n          ...state,\n          isWin: true,\n        };\n      }\n\n      return newState;\n    case Type.RESET_GAME:\n      return {\n        cards: generateCards(),\n        step: 20,\n        nick1: null,\n        nick2: null,\n        round: 1,\n        isModal: false,\n        isWin: false,\n      };\n    default:\n      return state;\n  }\n};\n\nexport default gameReducer;\n","import { createStore } from 'redux';\nimport { devToolsEnhancer } from 'redux-devtools-extension';\nimport gameReducer from './reducer/index';\n\nconst store = createStore(gameReducer, devToolsEnhancer());\n\nexport default store;\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './style.css';\r\n\r\nfunction Card({ overturn, id, handleClick, idx, height, width }) {\r\n  return (\r\n    <>\r\n      <div\r\n        className={`flip-container ${overturn ? 'flipped' : ''}`}\r\n        style={{ width, height }}\r\n        onClick={() => {\r\n          handleClick(idx, id);\r\n        }}\r\n      >\r\n        <div className=\"flipper\">\r\n          <img\r\n            id={id}\r\n            style={{ height, width }}\r\n            className={overturn ? 'front' : 'back'}\r\n            src={overturn ? `/img/${idx}.png` : `/img/logo192.png`}\r\n            alt=\"pic\"\r\n          />\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nCard.propTypes = {\r\n  handleClick: PropTypes.func.isRequired,\r\n  idx: PropTypes.string.isRequired,\r\n  height: PropTypes.number.isRequired,\r\n  width: PropTypes.number.isRequired,\r\n  id: PropTypes.number.isRequired,\r\n  overturn: PropTypes.bool.isRequired,\r\n};\r\n\r\nexport default Card;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport Card from '../card/Card';\r\n\r\nfunction Board({ cards, step, handleClick, idx, overturn }) {\r\n  return (\r\n    <div className=\"block-cards\">\r\n      <h3>You have {step} shots</h3>\r\n      {cards.map(card => (\r\n        <Card\r\n          key={card.index}\r\n          id={card.id}\r\n          width={100}\r\n          height={100}\r\n          idx={card.idx}\r\n          overturn={card.overturn}\r\n          handleClick={handleClick}\r\n        />\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n\r\nBoard.propTypes = {\r\n  cards: PropTypes.arrayOf(PropTypes.shape({})).isRequired,\r\n  step: PropTypes.number.isRequired,\r\n  handleClick: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default Board;\r\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport Board from './components/board/Board';\nimport * as gameActions from './redux/GameAction';\nimport './App.css';\n\nfunction App({\n  cards,\n  step,\n  showCards,\n  handleClick,\n  isModal,\n  isWin,\n  resetGame,\n}) {\n  return (\n    <div className=\"App\">\n      {!isModal ? (\n        <header className=\"App-header\">\n          <h2>Memory Game by Vasil Haida for Keplercode</h2>\n          {cards.length === 0 ? (\n            <button className=\"start-button\" type=\"button\" onClick={showCards}>\n              Start\n            </button>\n          ) : null}\n          {!isWin ? (\n            <Board cards={cards} step={step} handleClick={handleClick} />\n          ) : (\n            <div>\n              <h1>Congratulations!!! You win</h1>\n              <div>\n                <button\n                  className=\"start-button\"\n                  type=\"button\"\n                  onClick={resetGame}\n                >\n                  Try Once more ?\n                </button>\n              </div>\n            </div>\n          )}\n        </header>\n      ) : (\n        <div>\n          <h1>Game Over</h1>\n          <div>\n            <button className=\"reset-button\" type=\"button\" onClick={resetGame}>\n              You must win!\n            </button>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n\nApp.propTypes = {\n  cards: PropTypes.arrayOf(PropTypes.shape({})).isRequired,\n  step: PropTypes.number.isRequired,\n  handleClick: PropTypes.func.isRequired,\n  showCards: PropTypes.func.isRequired,\n  resetGame: PropTypes.func.isRequired,\n};\n\nconst mapStateToProps = state => ({\n  cards: state.cards,\n  step: state.step,\n  isModal: state.isModal,\n  isWin: state.isWin,\n});\n\nconst mapDispatchToProps = dispatch => ({\n  showCards: () => dispatch(gameActions.startGame()),\n  handleClick: (idx, id) => dispatch(gameActions.overturnCard(idx, id)),\n  resetGame: () => dispatch(gameActions.resetGame()),\n});\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(App);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n\nimport store from './redux/store';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}